name: Multi-Project Build and Release 1
 
on:
  push:
    branches:
      - main
    paths:
       - 'weatherapi/**'
       - 'cicdapi/**'
  pull_request:
    branches:
      - main
    paths:
       - 'weatherapi/**'
       - 'cicdapi/**'
 
jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      project1_changed: ${{ steps.detect.outputs.project1_changed }}
      project2_changed: ${{ steps.detect.outputs.project2_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Detect changed projects with debug
        id: detect
        run: |
          echo "Detecting modified files compared to previous commit"
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)

          echo "Changed files:"
          for f in $CHANGED_FILES; do
            echo " - $f"
          done

          project1_changed=false
          project2_changed=false

          for file in $CHANGED_FILES; do
            echo "Checking file: $file"
            if [[ "$file" == weatherapi/* ]]; then
              echo "Matched weatherapi directory for file: $file"
              project1_changed=true
            fi
            if [[ "$file" == *"weatherapi.csproj"* ]]; then
              echo "Matched weatherapi.csproj for file: $file"
              project1_changed=true
            fi
            if [[ "$file" == *"cicdapi.csproj"* ]]; then
              echo "Matched cicdapi.csproj for file: $file"
              project2_changed=true
            fi
          done

          echo "Final project1_changed: $project1_changed"
          echo "Final project2_changed: $project2_changed"

          echo "project1_changed=$project1_changed" >> $GITHUB_OUTPUT
          echo "project2_changed=$project2_changed" >> $GITHUB_OUTPUT


  build_project1:
    needs: detect_changes
    if: needs.detect_changes.outputs.project1_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
 
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
 
    - name: Restore dependencies - Project 1
      run: dotnet restore ./weatherapi/weatherapi/weatherapi.csproj
 
    - name: Build - Project 1
      run: dotnet build ./weatherapi/weatherapi/weatherapi.csproj --configuration Release --no-restore
 
    - name: Test - Project 1
      run: dotnet test ./weatherapi/weatherapi/weatherapi.csproj --no-build --verbosity normal
 
  build_project2:
    needs: detect_changes
    if: needs.detect_changes.outputs.project2_changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
 
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
 
    - name: Restore dependencies - Project 2
      run: dotnet restore ./cicdapi/cicdapi.csproj
 
    - name: Build - Project 2
      run: dotnet build ./cicdapi/cicdapi.csproj --configuration Release --no-restore
 
    - name: Test - Project 2
      run: dotnet test ./cicdapi/cicdapi.csproj --no-build --verbosity normal
 
  release:
    needs:
      - detect_changes
      - build_project1
      - build_project2
       
    if: needs.detect_changes.outputs.project1_changed == 'true' ||
        needs.detect_changes.outputs.project2_changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
 
    - name: Create Release Notes
      run: echo "Release triggered due to changes in projects."
 
    # Example: Create GitHub Release (adjust as needed - requires repo token)
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'push'
      with:
        tag_name: 'v1.${{ github.run_number }}'
        name: 'Automated Release v1.${{ github.run_number }}'
        body: 'This release contains builds for updated projects.'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
    # You can add artifact publishing, deployment steps etc. here
