name: Multi-Project Build and Release 1
 
on:
  push:
    branches:
      - main
    paths:
       - 'weatherapi/**'
       - 'cicdapi/**'
  pull_request:
    branches:
      - main
    paths:
       - 'weatherapi/**'
       - 'cicdapi/**'
 
jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      project1_changed: ${{ steps.detect.outputs.project1_changed }}
      project2_changed: ${{ steps.detect.outputs.project2_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Detect changed projects with debug
        id: detect
        run: |
          echo "Detecting modified files compared to previous commit"
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)

          echo "Changed files:"
          for f in $CHANGED_FILES; do
            echo " - $f"
          done

          project1_changed=false
          project2_changed=false

          for file in $CHANGED_FILES; do
            echo "Checking file: $file"
            if [[ "$file" == weatherapi/* ]]; then
              echo "Matched weatherapi directory for file: $file"
              project1_changed=true
            fi
            if [[ "$file" == weatherapi/* ]]; then
              echo "Matched weatherapi directory for file: $file"
              project1_changed=true
            fi
            if [[ "$file" == *"weatherapi.csproj"* ]]; then
              echo "Matched weatherapi.csproj for file: $file"
              project1_changed=true
            fi
            if [[ "$file" == *"cicdapi.csproj"* ]]; then
              echo "Matched cicdapi.csproj for file: $file"
              project2_changed=true
            fi
          done

          echo "Final project1_changed: $project1_changed"
          echo "Final project2_changed: $project2_changed"

          echo "project1_changed=$project1_changed" >> $GITHUB_OUTPUT
          echo "project2_changed=$project2_changed" >> $GITHUB_OUTPUT


  build_project1:
    needs: detect_changes
    if: needs.detect_changes.outputs.project1_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
 
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
 
    - name: Restore dependencies - Project 1
      run: dotnet restore ./weatherapi/weatherapi/weatherapi.csproj
 
    - name: Build - Project 1
      run: dotnet build ./weatherapi/weatherapi/weatherapi.csproj --configuration Release --no-restore
   
    - name: dotnet publish
      run: dotnet publish ./weatherapi/weatherapi/weatherapi.csproj

    - name: Upload Project 1 Artifact
      uses: actions/upload-artifact@v4
      with:
          name: project1-artifact
          path: ./weatherapi/weatherapi/weatherapi.csproj  # Adjust the path as needed
          
    - name: Test - Project 1
      run: dotnet test ./weatherapi/weatherapi/weatherapi.csproj --no-build --verbosity normal
      
  build_project2:
    needs: detect_changes
    if: needs.detect_changes.outputs.project2_changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
 
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
 
    - name: Restore dependencies - Project 2
      run: dotnet restore ./cicdapi/cicdapi.csproj
 
    - name: Build - Project 2
      run: dotnet build ./cicdapi/cicdapi.csproj --configuration Release --no-restore

    - name: dotnet publish
      run: dotnet publish ./weatherapi/weatherapi/weatherapi.csproj
      
    - name: Upload Project 1 Artifact
      uses: actions/upload-artifact@v4
      with:
          name: project1-artifact
          path: ./weatherapi/weatherapi/weatherapi.csproj  # Adjust the path as needed
          
    - name: Test - Project 2
      run: dotnet test ./cicdapi/cicdapi.csproj --no-build --verbosity normal
 
  # Release job for Project 1
  release_project1:
    needs: build_project1
    runs-on: ubuntu-latest
    if: success()  # Only run if the build was successful
    steps:
      - name: Download Project 1 artifact
        uses: actions/download-artifact@v4
        with:
          name: project1-artifact
          path: ./weatherapi/weatherapi/weatherapi.csproj

     

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'tapweatherapi'
          publish-profile: ${{ secrets.PUSHSECRET }}
          package: .

     
  # Release job for Project 2
  release_project2:
    needs: build_project2
    runs-on: ubuntu-latest
    if: success()  # Only run if the build was successful
    steps:
      - name: Download Project 2 artifact
        uses: actions/download-artifact@v4
        with:
          name: project2-artifact
          path: ./cicdapi/cicdapi.csproj

      - name: Release Project 2
        run: |
          echo "Releasing Project 2..."
          ls -l ./release/project2
          
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'tapcicdapi'
          publish-profile: ${{ secrets.CICDSECRET }}
          package: .
